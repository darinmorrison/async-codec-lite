var searchIndex = JSON.parse('{\
"async_codec_lite":{"doc":"","t":[3,3,3,8,16,10,3,4,13,13,13,8,10,3,3,3,8,16,16,10,11,8,16,16,10,3,3,12,12,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BytesCodec","LengthCodec","OverflowError","DecoderWithSkipAhead","Handler","prepare_skip_ahead","LimitCodec","LimitError","LimitExceeded","Defunct","Inner","SkipAheadHandler","continue_skipping","LinesCodec","CborCodec","JsonCodec","Decoder","Item","Error","decode","decode_eof","Encoder","Item","Error","encode","Framed","FramedParts","io","codec","read_buf","write_buf","FramedRead","FramedWrite","Bytes","BytesMut","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","try_poll_next","from","into","borrow","borrow_mut","try_from","try_into","type_id","try_poll_next","from","into","borrow","borrow_mut","try_from","try_into","type_id","try_poll_next","from","into","borrow","borrow_mut","try_from","try_into","type_id","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","as_ref","as_ref","deref_mut","extend","extend","fmt","fmt","from","from","from","from","from","from","from","hash","hash","fmt","fmt","deref","deref","from_iter","from_iter","from_iter","cmp","cmp","borrow_mut","as_mut","default","default","into_iter","into_iter","fmt","fmt","write_str","write_fmt","remaining","chunk","advance","copy_to_bytes","remaining","chunk","advance","copy_to_bytes","clone","clone","borrow","borrow","remaining_mut","advance_mut","chunk_mut","put","put_slice","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","drop","drop","decode","decode","decode","decode","decode","decode","encode","encode","encode","encode","encode","encode","from","clone","clone","clone","clone","clone","default","default","default","default","default","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","source","poll_next","poll_next","poll_next","poll_ready","start_send","poll_flush","poll_close","poll_ready","start_send","poll_flush","poll_close","poll_ready","start_send","poll_flush","poll_close","new","new","new","new","decode_eof","new","from_static","len","is_empty","copy_from_slice","slice","slice_ref","split_off","split_to","truncate","clear","with_capacity","new","len","is_empty","capacity","freeze","split_off","split","split_to","truncate","clear","resize","set_len","reserve","extend_from_slice","unsplit","new","with_capacity","get_ref","get_mut","get_pin_mut","into_inner","decoder","decoder_mut","read_buffer","read_buffer_mut","new","get_ref","get_mut","get_pin_mut","into_inner","encoder","encoder_mut","new","with_capacity","from_parts","get_ref","get_mut","get_pin_mut","codec","codec_mut","read_buffer","read_buffer_mut","into_inner","into_parts","new"],"q":["async_codec_lited":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A cheaply cloneable and sliceable chunk of contiguous …","A unique reference to a contiguous slice of memoryreates a new empty <code>Bytes</code>.","Creates a new <code>Bytes</code> from a static slice.","Returns the number of bytes contained in this <code>Bytes</code>.","Returns true if the <code>Bytes</code> has a length of 0.","Creates <code>Bytes</code> instance from slice, by copying it.","Returns a slice of self for the provided range.","Returns a slice of self that is equivalent to the given …","Splits the bytes into two at the given index.","Splits the bytes into two at the given index.","Shortens the buffer, keeping the first <code>len</code> bytes and …","Clears the buffer, removing all data.","Creates a new <code>BytesMut</code> with the specified capacity.","Creates a new <code>BytesMut</code> with default capacity.","Returns the number of bytes contained in this <code>BytesMut</code>.","Returns true if the <code>BytesMut</code> has a length of 0.","Returns the number of bytes the <code>BytesMut</code> can hold without …","Converts <code>self</code> into an immutable <code>Bytes</code>.","Splits the bytes into two at the given index.","Removes the bytes from the current view, returning them …","Splits the buffer into two at the given index.","Shortens the buffer, keeping the first <code>len</code> bytes and …","Clears the buffer, removing all data.","Resizes the buffer so that <code>len</code> is equal to <code>new_len</code>.","Sets the length of the buffer.","Reserves capacity for at least <code>additional</code> more bytes to …","Appends given bytes to this <code>BytesMut</code>.","Absorbs a <code>BytesMut</code> that was previously split off.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,0,0,2,2,2,0,3,0,0,0,0,4,4,4,4,0,5,5,5,0,0,6,6,6,6,0,0,0,0,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,2,2,2,2,2,2,2,2,2,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,6,6,6,6,6,6,6,15,15,15,14,14,14,14,14,15,15,14,15,14,15,15,15,15,14,15,15,15,14,14,14,14,14,15,14,14,15,15,14,14,15,15,15,14,15,15,14,15,14,15,15,14,15,15,14,14,14,14,15,15,15,15,15,14,15,14,15,15,15,15,15,14,15,14,15,15,14,14,14,15,14,15,14,15,15,14,15,7,8,10,11,12,13,7,8,10,11,12,13,2,7,8,11,12,13,7,8,11,12,13,7,8,11,12,13,7,8,9,10,2,11,12,13,16,17,18,6,9,2,2,16,17,18,16,16,16,16,17,17,17,17,18,18,18,18,8,10,12,13,4,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,6],"f":[null,null,null,null,null,[[["bytesmut",3]]],null,null,null,null,null,null,[[],["result",6]],null,null,null,null,null,null,[[["bytesmut",3]],[["result",4],["option",4]]],[[["bytesmut",3]],[["result",4],["option",4]]],null,null,null,[[["bytesmut",3]],["result",4]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["pin",3],["context",3]],[["option",4],["poll",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["pin",3],["context",3]],[["option",4],["poll",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["pin",3],["context",3]],[["option",4],["poll",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["bytesmut",3]],[["ordering",4],["option",4]]],[[["vec",3]],[["ordering",4],["option",4]]],[[["string",3]],[["ordering",4],["option",4]]],[[["string",3]],[["ordering",4],["option",4]]],[[["bytes",3]],[["ordering",4],["option",4]]],[[["vec",3]],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[["str",15]],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[["str",15]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["str",15]],["bytesmut",3]],[[],["bytesmut",3]],[[["bytesmut",3]],["bytes",3]],[[["str",15]],["bytes",3]],[[["global",3],["vec",3],["u8",15]],["bytes",3]],[[],["bytes",3]],[[["string",3]],["bytes",3]],[[]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["bytes",3]],[[],["bytesmut",3]],[[],["bytesmut",3]],[[["bytesmut",3]],["ordering",4]],[[["bytes",3]],["ordering",4]],[[]],[[]],[[],["bytes",3]],[[],["bytesmut",3]],[[]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3]]],[[["arguments",3]],[["result",4],["error",3]]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]],["bytes",3]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]],["bytes",3]],[[],["bytesmut",3]],[[],["bytes",3]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[],["uninitslice",3]],[[]],[[]],[[["bytes",3]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["bytesmut",3]],["bool",15]],[[["bytes",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[["string",3]],["bool",15]],[[["vec",3]],["bool",15]],[[["bytesmut",3]],["bool",15]],[[["string",3]],["bool",15]],[[],["bool",15]],[[]],[[]],[[["bytesmut",3]],[["result",4],["option",4]]],[[["bytesmut",3]],[["result",4],["option",4]]],[[["bytesmut",3]],[["result",4],["option",4]]],[[["bytesmut",3]],[["result",4],["option",4]]],[[["bytesmut",3]],[["result",4],["option",4]]],[[["bytesmut",3]],[["result",4],["option",4]]],[[["bytesmut",3]],["result",4]],[[["bytesmut",3]],["result",4]],[[["bytesmut",3]],["result",4]],[[["bytesmut",3]],["result",4]],[[["bytesmut",3]],["result",4]],[[["bytesmut",3]],["result",4]],[[]],[[],["bytescodec",3]],[[]],[[],["linescodec",3]],[[]],[[]],[[],["bytescodec",3]],[[]],[[],["linescodec",3]],[[]],[[]],[[["bytescodec",3]],["bool",15]],[[],["bool",15]],[[["linescodec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[["pin",3],["context",3]],[["option",4],["poll",4]]],[[["pin",3],["context",3]],[["option",4],["poll",4]]],[[["pin",3],["context",3]],[["option",4],["poll",4]]],[[["pin",3],["context",3]],[["result",4],["poll",4]]],[[["pin",3]],["result",4]],[[["pin",3],["context",3]],[["result",4],["poll",4]]],[[["pin",3],["context",3]],[["result",4],["poll",4]]],[[["pin",3],["context",3]],[["result",4],["poll",4]]],[[["pin",3]],["result",4]],[[["pin",3],["context",3]],[["result",4],["poll",4]]],[[["pin",3],["context",3]],[["result",4],["poll",4]]],[[["pin",3],["context",3]],[["result",4],["poll",4]]],[[["pin",3]],["result",4]],[[["pin",3],["context",3]],[["result",4],["poll",4]]],[[["pin",3],["context",3]],[["result",4],["poll",4]]],[[]],[[["usize",15]]],[[]],[[]],[[["bytesmut",3]],[["result",4],["option",4]]],[[],["bytes",3]],[[],["bytes",3]],[[],["usize",15]],[[],["bool",15]],[[],["bytes",3]],[[],["bytes",3]],[[],["bytes",3]],[[["usize",15]],["bytes",3]],[[["usize",15]],["bytes",3]],[[["usize",15]]],[[]],[[["usize",15]],["bytesmut",3]],[[],["bytesmut",3]],[[],["usize",15]],[[],["bool",15]],[[],["usize",15]],[[],["bytes",3]],[[["usize",15]],["bytesmut",3]],[[],["bytesmut",3]],[[["usize",15]],["bytesmut",3]],[[["usize",15]]],[[]],[[["usize",15],["u8",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["bytesmut",3]]],[[],["framedread",3]],[[["usize",15]],["framedread",3]],[[]],[[]],[[["pin",3]],["pin",3]],[[]],[[]],[[]],[[],["bytesmut",3]],[[],["bytesmut",3]],[[],["framedwrite",3]],[[]],[[]],[[["pin",3]],["pin",3]],[[]],[[]],[[]],[[],["framed",3]],[[["usize",15]],["framed",3]],[[["framedparts",3]],["framed",3]],[[]],[[]],[[["pin",3]],["pin",3]],[[]],[[]],[[],["bytesmut",3]],[[],["bytesmut",3]],[[]],[[],["framedparts",3]],[[],["framedparts",3]]],"p":[[8,"DecoderWithSkipAhead"],[4,"LimitError"],[8,"SkipAheadHandler"],[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[3,"BytesCodec"],[3,"LengthCodec"],[3,"OverflowError"],[3,"LimitCodec"],[3,"LinesCodec"],[3,"CborCodec"],[3,"JsonCodec"],[3,"Bytes"],[3,"BytesMut"],[3,"FramedRead"],[3,"FramedWrite"],[3,"Framed"]]}\
}');
initSearch(searchIndex);